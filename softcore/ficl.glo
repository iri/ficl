"   "text" -- caddr u                                                          
define " (double-quote) as an alias for s", and make it a prefix

#   "#..." -- n                                                                
Decimal number prefix.

$   "$..." -- n                                                                
Hexadecimal number prefix.

$"   i*caI n "string" -- [i+1]*caI [n+1]                                       
Define a string item.

$<   ca1 u1 ca2 u2 -- f                                                        
Return true if ca1/u1 < ca2/u2.

$=   ca1 u1 ca2 u2 -- f                                                        
Return true if ca1/u1 = ca2/u2.

$>   ca1 u1 ca2 u2 -- f                                                        
Return true if ca1/u1 > ca2/u2.

$>FLOAT   ca u -- true | false                                                 
Convert ca/u to FP number, return success or failure.

$APPEND   ca u sa --                                                           
Append ca/u to string <sa>.

$APPEND-CHAR   c sa --                                                         
Append char <c> to string <sa>.

$COUNT   sa -- ca u                                                            
Length of string <sa>.

$DUMP   ca n -- ca n                                                           
Display string on output device as "[string]".

$EMPTY   ca u -- f                                                             
Return true if ca/u has zero len.

$LEFT   ca u1 +n -- ca u2                                                      
Return the left str of ca/u1.

$LEN   ca u -- u                                                               
Return the len of ca/u.

$MID   ca1 u offs len -- ca2 u2                                                
Return the mid str of ca1/u from offs, running len. 

$MOVUP   ca n m --                                                             
Move string <ca/n> m chars up.

$PLACE   ca u sa --                                                            
Overwrite string <sa> with ca/u.

$POSTFIX   ca1 u1 ca2 u2 -- f                                                  
Return true if ca1/u1 has postfix ca2/u2.

$PREFIX   ca1 u1 ca2 u2 -- f                                                   
Return true if ca1/u1 has prefix ca2/u2.

$PRINT   sa --                                                                 
Print string.

$RIGHT   ca1 u +n -- ca2 n                                                     
Return the right str of ca1/u.

$SAVE   from n to -- to+1 n                                                    
Place <from/n> to to, return as counted string.

$SPLIT   ca1 u1 c -- ca2 u2 ca3 u3                                             
Split <ca1/u1> at char <c>.

$VARIABLE   len "name" --                                                      
Create string variable of length <len>.

$~=   ca1 u1 ca2 u2 -- f                                                       
Return true if ca1/u1 = ca2/u2 case insensitive.

%   "%..." -- n                                                                
Binary number prefix.

&   "&..." -- n                                                                
Octal number prefix.

'   'char' -- c                                                                
define ' as an alias for [char] or char, and make it a prefix

'TH   n "addr" -- &addr[n]                                                     
Address of cell <n> at array <addr>.

(.)   n -- ca n                                                                
Convert number to string.

(.R)   n m -- ca #                                                             
Convert number to string in a field right-justified.

(D.)   d -- ca n                                                               
Convert double number to string.

(D.R)   d m -- ca n                                                            
Convert double number to string in a field right-justified.

(U.)   u -- ca n                                                               
Convert unsigned number to string.

(U.R)   u m -- ca #                                                            
Convert unsigned number to string in a field right-justified.

(UD.)   ud -- ca n                                                             
Convert unsigned double number to string.

(UD.R)   ud m -- ca #                                                          
Convert unsigned double number to string in a field right-justified.

(WORDS:)   <substr> --                                                         
List those word names in the current word list that partly
match name.

(WORDS:)   <substr> --                                                         
List those word names in the current word list that partly
match name.

++   addr --                                                                   
Increment value at <addr>.

+IS   xt <name>                                                                
Chain <xt> to deferred <name>.

+PAD   -- caddr                                                                
Change to next PAD address <caddr>.

+STRING   src n1 dst n2 -- dst n1+n2                                           
Append <src/n1> to <dst/n2>, return <dst/n1+n2>. [OTA]

+USER   n1 n2 "name" -- n1+n2                                                  
Add a user variable `name' with size `n2'
update user variable offset.

+WARNING   --                                                                  
Enable redefinition warnings.

,"   "string" --                                                               
Store delimited string in dictionary space.

--   addr --                                                                   
Decrement value at <addr>.

->   ... --                                                                    
RECORD DEPTH AND CONTENT OF STACK.

-LEADING   ca1 u1 -- ca2 u2                                                    
Strip leading whitespace.

-ROT   a b c -- c a b                                                          
Rotate top 3 items up.

-SKIP   ca u1 b -- ca u2                                                       
Remove trailing <b> chars from ca/u1.

-TERM   --                                                                     
Turn off raw terminal input.

-TRAILING   ca u1 -- ca u2                                                     
Strip trailing whitespace.

-TRIM   ca1 u1 -- ca2 u2                                                       
Trim, strip leading and trailing spaces.

-WARNING   --                                                                  
Disable redefinition warnings.

.   n --                                                                       
Display number.

.(                                                                             
make .( a prefix (we just create an alias for it in the prefixes list)

..   i*x --                                                                    
Display the contents of the data stack and clear the stack.

.B   n --                                                                      
Display `n' in binary.

.BASE   --                                                                     
Display number base in decimal.

.D   n --                                                                      
Display `n' in decimal.

.ELAPSED   --                                                                  
Display milliseconds elapsed since TIMER-RESET.

.ID   lfa --                                                                   
Print the name of the word at `lfa'.

.LOWER   str n --                                                              
Prints str/n in lower case.

.O   n --                                                                      
Display `n' in octal.

.R   n m --                                                                    
Display number in a field right-justified.

.UPPER   str n --                                                              
Prints str/n in upper case.

.X   n --                                                                      
Display `n' in hexadecimal.

//   "//comment" --                                                            
make // as a prefix for comments.

/ALLOT   n --                                                                  
Allot `n' bytes, erase the area.

/STRING   caddr1 u1 +n -- caddr2 u2                                            
Remove +n chars from `caddr1/u'.

/TERM   --                                                                     
Prepare terminal for raw terminal input.

0<=   n -- f                                                                   
True if n <= 0.

0<>   n1 -- ff                                                                 
Return true, if n1 does not equal to zero.

0>=   n -- f                                                                   
True if n >= 0.

0B   "0b..." -- n                                                              
Prefix for binary numbers.

0D   "0d..." -- n                                                              
Prefix for decimal numbers.

0MAX   x -- u                                                                  
Limit top to x.

0O   "0o..." -- n                                                              
Prefix for octal numbers.

0X   "0x..." -- n                                                              
Prefix for hexadecimal numbers.

1-                                                                             
Converts a <bit> to a <mask>.

1/F   F: r1 -- r2                                                              
Calculate 1/r1.

2**   n -- 2^n                                                                 
Computes 2^<n>.

2**                                                                            
Converts bit number <#> to a <bit>.

2FIELD                                                                         
Create two name fields with the same offset and size

2LOCAL   name --                                                               
Define a double-cell local named `name'.

2NIP   w x y z -- y z                                                          
Drop 3rd and 4th element from stack.

2ROT   d1 d2 d3 -- d2 d3 d1                                                    
Rotate top three double elements to left.

3DROP   x y z --                                                               
Drop top three elements from stack.

3DUP   a b c -- a b c a b c                                                    
Duplicate top three data stack items.

4DUP   x1 x2 x3 x4 -- x1 x2 x3 x4 x1 x2 x3 x4                                  
Duplicate top 4 items.

::   class "method" --                                                         
Compile xt for `method' of `class'.
Example:
   myobj [ myclass :: mymethod ] ...

:SWITCH   xt "name" -- addr                                                    
Define a switch named `name', default behavior will be `xt'.

<=   n1 n2 -- ff                                                               
Return true if `n1' is less-or-equal to `n2'.

<>   n1 n2 -- ff                                                               
Return true, if n1 does not equal to n2.

<W@   w-addr -- n                                                              
Fetch 16bit value, sign extend.

>=   n1 n2 -- ff                                                               
Return true if `n1' is greater-or-equal to `n2'.

>BUFFER   ca u buf -- buf u                                                    
Move string to buffer. Returns buffer address and string
length.

>CELLS   #bytes -- #cells                                                      
Round up <#bytes> to the corresponding <#cells>.

>HEAP   ca u -- addr u                                                         
Move string <ca/u> to heap.

>PAD   caddr1 u -- caddr2 u                                                    
Move <caddr>/<u> to next PAD area, return new <caddr2>/<u>.

>S   n --                                                                      
Push value to system stack.

?   addr --                                                                    
Display contents of `addr'.

??   ff <word> --                                                              
Execute following word if flag is true.

?BLANK   c -- f                                                                
Answer TRUE if char is white-space (space or tab) or newline.

?EXIT   f --                                                                   
Exit if <f> is true.

?MS   -- u                                                                     
Return milliseconds elapsed.

?NEWLINE   c -- f                                                              
Answer TRUE if char is CR/LF.

?PRINTABLE   c -- f                                                            
Return true if char is printable.

@EXECUTE   addr --                                                             
Execute xt at addr, if not zero.

ABORT"   flag "message" --                                                     
If `flag' is true, display message and abort execution.

ABS   x -- x                                                                   
Give absolute value of `x'.

ACTION-OF   <name> -- xt                                                       
Return the <xt> associated with the deferred word <name>.

AKA   old new --                                                               
Make alias `new' for `old'.

ALPHA   --                                                                     
Set number base to 36.

ALSO   --                                                                      
ALSO dups the search stack...

ANDIF   f --                                                                   
Shortcut logical AND.

ANEW   "name" --                                                               
Execute "name" if found, define a marker with "name".

APPEND   from len to --                                                        
Append string <from/len> to counted string <to>.

APPEND-CHAR   c to --                                                          
Append char <c> to counted string <to>.

ARRAY   n "name" --                                                            
Define an array `name' with n cells.
Usage: name ( n -- addr )
Return the address of the nth cell.

ARSHIFT   n1 m -- n2                                                           
Double number arithmetic right shift.

ASHIFT   n1 m -- n2                                                            
If m > 0 perform LSHIFT, else arithmetic right shift.

AT-XY   col row --                                                             
Position cursor to col/row.

BACK   ca u1 b -- ca u2                                                        
Scan backwards for char <b> in ca/u1.

BEHAVIOR   xt1 -- xt2                                                          
Synonym for DEFER@.

BETWEEN   n lo hi -- f                                                         
Returns true if lo <= n <= hi.

BIN   fam1 -- fam2                                                             
Specify binary file access mode.

BINARY   --                                                                    
Set number base to binary.

BJOIN   cl ch -- n                                                             
Join lo and hi 8bit bytes.

BL-SCAN   str len -- str+i len-i                                               
Look for white space from start.

BL-SKIP   str len -- str+i len-i                                               
Skip over white space at start.

BLANK   addr u --                                                              
Fill `u' bytes from `addr' with BL.

BOUNDS   lo count -- hi lo                                                     
Convert lo/count to boundary.

BRANCH,   addr --                                                              
Assemble a branch to `addr'.

BRAND-WORDLIST   wid --                                                        
BRAND-WORDLIST is a helper for ficl-named-wordlist.
Usage: wordlist dup create , brand-wordlist
gets the name of the word made by create and applies it to the wordlist.

BSPLIT   w -- bl bh                                                            
Split 16bit word to 8bit bytes.

BUFFER:   n "name" --                                                          
Allot a buffer `name' with `n' chars in dictionary space.

C>N   c -- x                                                                   
Sign extend char to cell.

CARRAY   n "name" --                                                           
Define an array `name' with n chars.
Usage: name ( n -- caddr )
Return the address of the nth char.

CASE?   n lit -- true | n false                                                
Alternative CASE branch.

CELL-   addr -- addr                                                           
CELL- undoes CELL+

CFA   lfa -- cfa                                                               
Gives back the code field address.

CHAR-   caddr -- caddr                                                         
CHAR- undoes CHAR+

CHOOSE   u -- 0..u-1                                                           
Return random integer between u and u-1.

CHOP   a m b n -- b n a m-n                                                    
Split string <a/m> at place given by <b/n>.

CLASS   superclass -- class methods vars                                       
Begin class definition with base class `superclass'.
Example:
   object class
      cell var mVar
      method :mymethod
   end-class myclass

CLEAR   i*x --                                                                 
Clear parameter stack.

CLEAR-BITS   mask addr --                                                      
Reset <mask> bits in cell at <addr>.

CO   --                                                                        
Suspend current, return to caller. When caller exits
continue with current. [CI]

COMPILE,   xt --                                                               
Compile xt into the current definition.

COMPILE-ONLY?   xt -- f                                                        
Gives back true, if `xt' is compile only.

CONTAINS?   str1 n1 str2 n2 -- str1 n1 flag                                    
Test that str1 contains str2.

COUNTER   -- ms                                                                
Return current milliseconds.

D+   d1 d2 -- d                                                                
Add two double numbers.

D-   d1 d2 -- d                                                                
Subtract two double numbers.

D.   d --                                                                      
Display double number.

D.R   d m --                                                                   
Display double number in a field right-justified.

D0<   d -- f                                                                   
Return true if double number is less-than zero.

D0<>   d -- f                                                                  
True if <d> <> 0.

D0=   d -- f                                                                   
Return true if double number is zero.

D2*   d1 - d2                                                                  
Double number 2*.

D2/   d1 -- d2                                                                 
Double number 2/.

D<>   d1 d2 -- f                                                               
Returns true if two double numbers are not equal.

D=   d1 d2 -- f                                                                
Return true if two double numbers are equal.

D>R   deg -- rad                                                               
Convert degrees to radians.

D>S   d -- s                                                                   
Convert double number to single.

DABS   d -- ud                                                                 
Convert double cell number to its absolute value.

DARWIN?   -- ff                                                                
True if Darwin.

DECR   addr --                                                                 
Decrement value at <addr>.

DEFER   <name>                                                                 
Define a word which does nothing. Later it could
be defined to execute any xt.

DEFER!   xt2 xt1 --                                                            
Set the word <xt1> to execute <xt2>.

DEFER@   xt1 -- xt2                                                            
Retrieve <xt2> the word currently associated with the
deferred word <xt1>.

DEFINES   xt class "method" --                                                 
Define `xt' for `method' in `class'.
Example:
   :noname ( obj -- ) ... ; myclass defines :mymethod

DF,   F: r --                                                                  
Store the double-precision FP number in dictionary space. Also F,

DF?   addr --                                                                  
Display the double FP number at `addr'. Also F?

DIRECTIVE   --                                                                 
Make previous word immediate and compile only.

DLSHIFT   d1 n -- d2                                                           
Double number LSHIFT.

DMAX   d1 d2 -- d                                                              
Return the maximum of d1 and d2.

DMIN   d1 d2 -- d                                                              
Return the minimum of d1 and d2.

DO-UNDEFINED   caddr u -- i*x f                                                
Report unknown word, compile LOSE.

DO-VOCABULARY   --                                                             
DO_VOCABULARY handles the DOES> part of a VOCABULARY
When executed, new voc replaces top of search stack

DOT   n base --                                                                
Display `n' in temporary base `base'.

DRSHIFT   d1 n -- d2                                                           
Double number RSHIFT.

DUMP   addr u --                                                               
Dump `u' address units from `addr'.

DUMP   addr u --                                                               
Dump memory `u' bytes from `addr' in hexadecimal.

ED   --                                                                        
Edit current source.

EDIT   "filename" --                                                           
Edit file named `filename'.

EDITED   ca u --                                                               
Edit file named `ca/u'.

EMITS   n char --                                                              
Emit <n> <char>s.

EMPTY   xn..x1 --                                                              
Empty cleans the parameter stack.

EMPTY   --                                                                     
Empty the dictionary.

END-C@   ca u -- b                                                             
Last char of string ca/u.

END-CLASS   class methods vars "classname" --                                  
Ends class definition for class `classname'.

END-LOCALS   --                                                                
End the definitio of locals.

END-STRING-ARRAY   i*caddrI n "name" --                                        
Close the definition of string array `name'.
Executing n `name' will return the nth string in the array
as caddr/u.

END-WORD   str n -- str+/str-i i                                               
Last word in a string after trimming.

ENDS?   str len pat len2 -- str len flag                                       
Check end of string.

ENUM                                                                           
Define an enum with "name", increment number on stack.

ENUM4                                                                          
Define an enum with "name", increment number on stack by 4.

EQUALS?   str1 n1 str2 n2 -- str1 n1 flag                                      
Check for the string equal to the pattern.

ERASE   addr u --                                                              
Erase `u' address units from `addr'.

EXCHANGE   n1 addr -- n2                                                       
Store <n1> at <addr>, return old contents. [MAX]

EXPECT   c-addr u1 --                                                          
Accept at most `u1' chars at `c-addr', store the actual length
in SPAN.

EXPIRED   u -- flag                                                            
Return true if time passed.

F**2   F: r1 -- r2                                                             
Calculate r1^2.

FCLEAR   F: i*r --                                                             
Empty FP stack.

FD.P.   F: r --                                                                
Print bit pattern of r in hex.

FEQU?   F: r1 r2 --                                                            
Testing FP number equality.

FEXACTLY=   F: r1 r2 --                                                        
True if r1 exactly equal to r2.

FICL-NAMED-WORDLIST                                                            
Create a wordlist named `name' with `hash-size'.

FICL-SET-CURRENT   wid -- old-wid                                              
FICL-SET-CURRENT sets the compile wordlist and pushes the previous value

FIELD                                                                          
Define a field with offset and size. 

FILE-CHECK   n --                                                              
Check for file access error.

FINITE?   F: r --                                                              
True if r is finite.

FNIP   F: r1 r2 -- r2                                                          
Drop 2nd item of floating-point stack.

FORTH   --                                                                     
FORTH drops the top of the search stack and pushes FORTH-WORDLIST

FOURTH   w x y z -- w x y z w                                                  
Copy 4th element to top of stack.

FPOPD   u --                                                                   
Move a 64bit pattern from parameter to float stack.

FPOPS   u --                                                                   
Move a 32bit pattern from parameter to float stack.

FPUSHD   F: r --                                                               
Move an IEEE 64bit float from the float to the parameter stack.

FPUSHS   F: r --                                                               
Move an IEEE 32bit float from the float to the parameter stack.

FS.P.   F: r --                                                                
Print SFLOAT bit pattern of r in hex.

FTUCK   F: r1 r2 -- r2 r1 r2                                                   
Put top of floating-point stack under the 2nd item.

FVARIABLE   "name" --                                                          
Define a floating-point variable.

H.   n --                                                                      
Display `n' in hexadecimal.

HIDE                                                                           
Hide the following definitions.

HIWORD   xxyy -- xx                                                            
High half of value.

HOLDS   ca u --                                                                
Hold string in conversion buffer.

HOME   --                                                                      
Position cursor to top left corner.

HUNT   str1 n1 pat n2 -- str+I n1-i                                            
Scan for a string pat/n2.

IMMEDIATE?   xt -- f                                                           
Gives back true if `xt' is immediate.

IN   --                                                                        
Include current source file.

INCLUDE   "path" --                                                            
Include the contents of file specified by path.

INCLUDED   c-addr u --                                                         
Include the contents of file specified by c-addr/u.

INCR   addr --                                                                 
Increment value at <addr>.

INSTRUCTION?   xt -- f                                                         
Gives back true, if `xt' is a VM instruction.

IS   xt <name>                                                                 
Order <name> to execute xt.

IS-ALNUM   char -- flag                                                        
Test char for alphanumeric [A-Za-z0-9].

IS-ALPHA   char -- flag                                                        
Test char for alphabetic [A-Za-z].

IS-DIGIT   char -- flag                                                        
Test char for digit [0-9].

IS-LOWER   char -- flag                                                        
Test for lowercase letter.

IS-UPPER   char -- flag                                                        
Test for uppercase letter.

IS-WHITE   char -- flag                                                        
Test char for white space.

JOIN   dst n1 src n2 -- src n1+n2                                              
Joint str1 and str2.

LAY   ca1 b -- ca2                                                             
Lay down next char in string.

LCASE   c1 -- c2                                                               
Convert c1 to lower case.

LEXEME   "name" -- str len                                                     
Get next word on the line. If it's a single character, use
it as the delimiter to get a phrase.

LFA   xt -- lfa                                                                
Gives back the link field address.

LINUX?   -- ff                                                                 
True if Linux.

LOCAL   name --                                                                
Define a single-cell local named `name'.

LOCALS|   name...name | --                                                     
Define locals.

LOSE   --                                                                      
Abort execution.

LOWER   str n --                                                               
Convert string to lowercase in-place.

LOWORD   xxyy -- yy                                                            
Low half of value.

LROTATE   n1 m -- n2                                                           
Rotate left number m places.

LS   --                                                                        
List current directory.

M*/   d . n u -- d .                                                           
Multiply <d> by <n> to triple result; divide by <u>
to double result.

M+   d1 n -- d2                                                                
Add double and single number producing a double result.

M-   d1 n -- d2                                                                
Subtract <n> from <d1>.

M/   d n1 -- n2                                                                
Divide <d> by <n1>, giving signed quotient <n2>.

MACRO   "name <char> ccc<char>" --                                             
Define a macro.

MARKER   "name" --                                                             
Define marker `name'. When executed forgets all words
defined later.

MEMORY-CHECK   n --                                                            
Check for memory allocation error.

METHOD   m v "method" -- m' v                                                  
Define method `method'.

MS?   -- u                                                                     
Return elapsed time since TIMER-RESET, update diff0.

MULTI   --                                                                     
Execute loop until TOR is not negative.
Example: n >R MULTI ... REPEAT R>DROP 

MUTEX   "name" --                                                              
Define a mutex with `name'.

MUX   a b mask -- out                                                          
Cellwide MUX, 1 in <mask> selects the corrsponding bit from <a>,
0 selects the bit from <b>.

N>R   xn .. x1 n --                                                            
Push n+1 elements on the return stack. [C.Haak]

NEW   class -- o                                                               
Allot space for instance of `class'.
Example:
   myclass new constant myobj

NEXT-WORD   -- str len                                                         
Get next word across line breaks. len is 0 at EOF.

NFA   lfa -- nfa                                                               
Gives back the name field address.

NIP   y x -- x                                                                 
Drop the 2nd item of the stack.

NOOP   --                                                                      
No operation.

NR>   -- xn .. x1 n                                                            
Pop n+1 elements from the return stack. [C.Haak]

OCTAL   --                                                                     
Set number base to octal.

OFF   addr --                                                                  
Clear flag at <addr>.

OFF?   addr -- f                                                               
Flag at <addr> clear ?

ON   addr --                                                                   
Set flag at <addr>.

ON?   addr -- f                                                                
Flag at <addr> set ?

ONLY   --                                                                      
ONLY sets the search order to a default state

OPTION   ff "name" --                                                          
Create option flag, which turns a line into comment. [M.Gassanenko]

ORDER   --                                                                     
ORDER displays the compile wid and the search order list

ORELSE   f --                                                                  
Shortcut logical OR.

PACK   from n to -- to                                                         
Like place but returns <to>.

PAD   -- caddr                                                                 
Return current PAD address <caddr>.

PAGE   --                                                                      
Clear page.

PARSE-NAME   <spaces>name -- c-addr u                                          
Skip leading spaces and parse name delimited by a space.

PEEKWORD   -- cstr                                                             
Get next word, don't advance >IN.

PFA   lfa -- pfa                                                               
Gives back the parameter field address.

PLACE   from len to --                                                         
Place string <from/len> as counted string <to>.

POSSIBLY   "name" --                                                           
Execute "name" if found.

PREVIOUS   --                                                                  
PREVIOUS drops the search order stack

PRINT   ca --                                                                  
Print counted string <ca>.

Q>N   q -- n                                                                   
Sign extend 32bit value.

QJOIN   ql qh -- n                                                             
Join lo and hi 32bit words.

QSPLIT   n -- ql qh                                                            
Split 64bit word to 32bit words.

R'@   -- x1                                                                    
2nd element of return stack.

R/O   -- fam                                                                   
Read-only mode.

R/W   -- fam                                                                   
Read-write mode.

R>D   rad -- deg                                                               
Convert radians to degrees.

R>DROP   --                                                                    
Drop item from return stack.

RANDOMIZE   --                                                                 
Initialize random number generator.

REPLACE-CHAR   str n c1 c2 --                                                  
Replace c1 with c2 in string str.

RETRY   --                                                                     
Jump back to the beginning of a word. (W.Baden)

REWIND-FILE   fid -- ior                                                       
Rewind the file.

RJUSTIFY   ca n m -- ca n+?m                                                   
Right align string <ca/n> in a field of <m>.
Modifies buffer <ca> in place!

RM   "name" --                                                                 
Remove file named `name'.

ROTATE   n1 m -- n2                                                            
If m > 0 rotate left, else rotate right number.

RROTATE   n1 m -- n2                                                           
Rotate right number m places.

RUN:   head n --                                                               
Define the behavior for `n'. Close the definition with `;'.

RUNS   head n "word" --                                                        
For `n' run `word' at runtime.

S.   n --                                                                      
Display `n' as signed number.

S>   -- n                                                                      
Pop value from system stack.

S@   -- n                                                                      
Copy value from system stack.

SAFE-ALLOCATE   n --                                                           
Allocate `n' bytes, abort if allocation failed.

SCAN   ca1 u1 b -- ca2 u2                                                      
Search for <b> in ca1/u1.

SCLEAR   --                                                                    
Clear system stack.

SDEPTH   -- n                                                                  
Depth of system stack.

SET-BITS   mask addr --                                                        
Set <mask> bits in cell at <addr>.

SF,   F: r --                                                                  
Store the single-precision FP number in dictionary space. Also F,

SF?   addr --                                                                  
Display the single-precision FP number at `addr'. Also F?

SHIFT   n1 m -- n2                                                             
If m > 0 perform LSHIFT, else RSHIFT.

SIMILAR?   str1 n1 str2 n2 -- str1 n1 flag                                     
Check for the string equal to the pattern.

SKIP   ca1 u1 b -- ca2 u2                                                      
Skip <b> chars in ca1/u1.

SMUDGED?   xt -- f                                                             
Gives back true, if `xt' is smudged.

SOURCE!   ca u --                                                              
Set source file name to `ca/u'.

SPACE   --                                                                     
Emit a space.

SPACES   n --                                                                  
If `n' is positive emit `n' spaces.

SPLIT   str n c -- str+i n-i str i                                             
Divide a string at a given character.

SPLIT-NEXT-LINE   src . -- src' . str len                                      
Split the next line from the string.

SRCLINE   -- ca #                                                              
Returns the remaining source line.

STARTS?   str len pat len2 -- str len flag                                     
Check start of string.

STRCAT   2:a 2:b -- 2:new-a                                                    
Concatenate `b' to `a'.

STRCPY   2:a 2:b -- 2:new-a                                                    
Copy `b' to `a'.

STRDUP   c-addr length -- c-addr2 length2 ior                                  
Duplicate the string c-addr/length on the heap
ior is 0 if done,-1 if allocation failed.

STRING,   caddr u --                                                           
Store string `caddr/u' in dictionary space.

STRING-ARRAY   --                                                              
Begin definition of a literal string array.

STRING/   str n i -- str+i/str-i i                                             
Get ending characters.

STRUCT   -- initial-offset                                                     
Begin definition of a struct.

SWITCH]   head --                                                              
Close definition of switch.

T*   d . n -- t . .                                                            
Multiply a double number by a single number to get a
triple number.

T/   t . . u -- d .                                                            
Divide a triple number by an unsigned number to get a
double number.

TALKING   --                                                                   
Set verbose mode for tester.

TALKING?   -- ff                                                               
Return true if tester inn verbose mode.

TASK   "name" --                                                               
Define a task with `name'.

TESTING   --                                                                   
Talking comment for tester.

TEXT   delim --                                                                
Move following text delimited with `delim' to PAD.

TH-WORD   str n i -- str+I n-i                                                 
The ith white-space delimited substring of str/n.

TH-WORD-BACK   str n i -- str+I n-I                                            
All before the ith white-space delimited substring 
of <str/n>.

TH-WORD-FORWARD   str n i -- str+I n-I                                         
The ith white-space delimited-substring of <str/n>
and what follows it.

THENS   CS: 0 orig_1 ... orig_N --                                             
Close all open IFs up to COND.

THIRD   x y z -- x y z x                                                       
Copy 3rd element to top of stack.

TIMER   ms --                                                                  
Display milliseconds elapsed since ms.

TIMER-RESET   --                                                               
Reset timer.

TNEGATE   t .. - -t . .                                                        
Negate a triple number.

TOGGLE-BITS   mask addr --                                                     
Toggle <mask> bits in cell at <addr>.

TRIM   str len -- str len-i                                                    
Trim white space from end of string.

TUCK   y x -- x y x                                                            
Put the top of stack under the 2nd item.

TYPE.   ca u --                                                                
Type string and a space.

TYPE.R   ca u n --                                                             
Display ca/u in a field of n chars width.

T{   --                                                                        
Syntactic sugar.

U.R   u m --                                                                   
Display unsigned number in a field right-justified.

U2/   u1 -- u2                                                                 
Unsigned number 2/.

UD.   ud --                                                                    
Display unsigned double number.

UD.R   ud m --                                                                 
Display unsigned double number in a field right-justified.

UD2/   ud1 -- ud2                                                              
Unsigned double number 2/.

UM+   u1 u2 -- ud                                                              
Add two unsigned number producing an unsigned double result.

UMAX   u1 u2 -- u                                                              
Return the maximum of two unsigned numbers.

UMIN   u1 u2 -- u                                                              
Minimum of u1 and u2.

UNDER+   a b c -- a+c b                                                        
Add TOS to under NOS.

UNDER1+   x1 x2 -- x1' x2                                                      
Add 1 to NOS.

UNDER1-   x1 x2 -- x1' x2                                                      
Subtract 1 from NOS.

UPCASE   c1 -- c2                                                              
Convert c1 to upper case.

UPPER   str n --                                                               
Convert string to uppercase in-place.

VAR   m v size "var" -- m v'                                                   
Define `var' with size.

VIEW-NEXT-LINE   src . str len -- src . str len str2 len2                      
Copy next line above current line.

VOCABULARY   name --                                                           
Define a new vocabulary named `name'.

W/O   -- fam                                                                   
Write-only mode.

W>N   w -- x                                                                   
Sign extend 16bit word to cell.

WINNT?   --                                                                    
True if Windows.

WITHIN   test low high -- flag                                                 
Return true if low <= test < high.

WJOIN   wl wh -- n                                                             
Join lo and hi 16bit words.

WORDLIST   --                                                                  
Create an unnamed wordlist, with default hash-size of 1.

WORDS:   "name" --                                                             
iForth variant.

WORDS:   "name" --                                                             
iForth variant.

WSPLIT   n -- wl wh                                                            
Split 32bit word to 16bit words.

XXX   --                                                                       
Abort with `not implemented' message.

ZAPPEND   from n zto --                                                        
Append to NULL terminated string.

ZAPPEND-CHAR   c zto --                                                        
Append char to NULL terminated string.

ZCOUNT   za -- ca u                                                            
Address and length of NULL terminated string.

ZERO   x -- 0                                                                  
Replace x with zero.

ZLENGTH   za -- u                                                              
Length of NULL terminated string.

ZPLACE   from n zto --                                                         
Place to NULL terminated string.

ZPRINT   cstr --                                                               
Print C-string <cstr>.

[+SWITCH   "name" -- head                                                      
Extend switch `name'.

[DEFINED]   "name" -- flag                                                     
Returns true if "name" defined.

[ELSE]   --                                                                    
Conditionally interpret/compile the following text,
if the flag was false at the matching [if].

[ENDIF]   --                                                                   
A synonym for [then].

[IF]   flag --                                                                 
If flag true, interpret/compile the following text.

[SWITCH   "name" "default-word" -- head                                        
Define a switch named `name', the default word will be `default-word'.

[THEN]   --                                                                    
Ends the conditional compilation.

[UNDEFINED]   "name" -- flag                                                   
Returns true if "name" undefined.

\   "\comment" --                                                              
make \ a prefix

\\   --                                                                        
Skip remaining text in a file.

{   "{" a b c | cleared -- d e "}"                                             
Define Johns-Hopkins locals. Variables before the "|" are
initialized in reverse order. Variable before the "--" are
cleared.
Prefix flags:
   1  single-cell
   2  double-cell
   d  double-cell
   f  floating-point (use floating stack)
   i  integer (use data stack)
   s  single-cell
Specify as many as you like; later flags have precidence.
Thus, "f2:foo" and "2is2f:foo" are both double-cell floats.

{{   "{{" a b c -- d e "}}"                                                    
FiCL locals, variable before the "--" are initialized
in reverse order.

}T   ... --                                                                    
Compare stack (expected) contents with saved (actual) contents.

